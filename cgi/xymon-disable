#!/usr/bin/env python3
"""
CGI to disable a xymon test.

Example request:

```sh
http -f POST 'https://baseurl.example.com/cgi/xymon-disable' \
    host=hal test=cpu msg='working on it' min=10
```

If the duration is -1, the test is disabled until OK. If not duration
is given, it defaults to 60 minutes.
"""

import os
import re
import subprocess
from flask import Flask, request, make_response
from wsgiref.handlers import CGIHandler

XYMONSERVER = "phd-mon"
XYMONCLI = "/usr/lib/xymon/server/bin/xymon"
ALLOWED_CHARS = re.compile(r"^[a-zA-Z0-9\.\-_,\[\]\^\|\'? ]+$")

app = Flask(__name__)


def set_xymon_disable(data):
    disable_cmd = (
        f"{XYMONCLI} {XYMONSERVER} 'disable "
        f"{data['host']}.{data['test']} {data['min']} {data['user']}: {data['msg']}'"
    )
    try:
        cmd = subprocess.run(
            [disable_cmd],
            shell=True,
            timeout=1,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if cmd.returncode != 0:
            raise Exception(
                "command returned non-zero exit code: " + str(cmd.returncode)
            )
        if cmd.stderr:
            stderr = cmd.stderr.decode("utf-8", errors="replace")
            raise Exception("command returned output to stderr: " + stderr)
        else:
            return True
    except subprocess.TimeoutExpired:
        raise Exception("command timeout")


@app.route("/", methods=["POST"])
def index():
    data = {}

    # Sanitize form input by ignoring everything that doesn't match the allowed characters.
    for key, value in request.form.items():
        if ALLOWED_CHARS.match(key) and ALLOWED_CHARS.match(value):
            data[key] = value

    # Return bad request if required fields are missing.
    for required_field in ["msg", "host", "test"]:
        if data.get(required_field, "") == "":
            return "Bad request", 400

    # Fill remaining info.
    data["user"] = os.environ.get("REMOTE_USER", "unknown")
    data["min"] = data.get("min", 60)

    # Send disable to xymon.
    set_xymon_disable(data)

    # Return success when no exception occured.
    resp = make_response("Success")
    resp.headers["Content-Type"] = "text/plain; charset=utf-8"
    resp.access_control_allow_origin = "*"

    return resp


if __name__ == "__main__":
    CGIHandler().run(app)
