#!/usr/bin/env python3
'''
CGI to acknowledge a xymon test.

Example command to POST a new acknowledgment

```sh
http -f POST 'https://baseurl.example.com/cgi/xymon-ack' \
    number=123456 msg='working on it' min=10
```

If the ack duration in minutes is not given it defaults to 60.

'''
import cgi
import os
import re
import subprocess

allowed_chars = re.compile(r'^[a-zA-Z0-9\-,\[\]\^\|\' ]+$')


def get_form_dict():
    form_raw = cgi.FieldStorage(keep_blank_values=True)
    form_dict = {}
    for key in form_raw.keys():
        value = form_raw[key].value
        # Sanitize input by ignoring everything that doesn't match the allowed characters
        if allowed_chars.match(key) and allowed_chars.match(value):
            form_dict[key] = value

    return form_dict


def form_is_valid(form_dict):
    is_valid = True
    for required_field in ['number', 'msg']:
        if form_dict.get(required_field, '') == '':
            is_valid = False

    return is_valid


def save_acknowledgment(ack_data):
    ack_cmd = '/usr/lib/xymon/server/bin/xymon 0 "xymondack {} {} {}: {}"'.format(
        ack_data['number'], ack_data['min'], ack_data['user'], ack_data['msg']
    )
    try:
        cmd = subprocess.run([ack_cmd], shell=True, timeout=1,
                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if cmd.returncode != 0:
            raise Exception('command returned non-zero exit code: ' + str(cmd.returncode))
        if cmd.stderr:
            stderr = cmd.stderr.decode('utf-8', errors='replace')
            raise Exception('command returned output to stderr: ' + stderr)
        else:
            return 'Success'
    except subprocess.TimeoutExpired:
        raise Exception('command timeout')


if os.environ['REQUEST_METHOD'] == 'GET':
    print("Status: 400 Bad Request\n")

if os.environ['REQUEST_METHOD'] == 'POST':
    acknowledgment = get_form_dict()

    if not form_is_valid(acknowledgment):
        print("Status: 400 Bad Request\n")
    else:
        print("Content-Type: text/plain\nAccess-Control-Allow-Origin: *\n")
        acknowledgment['user'] = os.environ['REMOTE_USER']
        acknowledgment['min'] = acknowledgment.get('min', 60)
        print(save_acknowledgment(acknowledgment))
