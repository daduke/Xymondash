#!/usr/bin/env python3
'''
CGI that fetches xymon data and returns it as json.

The query string can be used to pass parameters to the xymon cli

  * `?color=red,yellow,purple&test=[^libs]`: show alerts of given colors and ignore the libs test
  * `?page=san|bkpcluster`: show hosts of the given pages, as defined in `/etc/xymon/hosts.cfg`

Please refer to the xymondboard section in `man xymon` for further details.
'''
import cgi
import csv
import json
import re
import subprocess
import sys
from collections import defaultdict

# Increase maximal field size to avoid "_csv.Error: field larger than field limit"
csv.field_size_limit(sys.maxsize)

default = {}
default['host'] = ''
default['page'] = ''
default['color'] = 'red,yellow,purple'
default['test'] = '[^libs]'
default['fields'] = ','.join([
    'hostname', 'testname', 'color', 'flags', 'lastchange',
    'logtime', 'validtime', 'acktime', 'disabletime', 'sender', 'cookie',
    'line1', 'clntstamp', 'XMH_CLASS', 'acklist', 'ackmsg', 'dismsg', 'msg'])
allowed_chars = re.compile(r'^[a-zA-Z0-9\-,\[\]\^\|]+$')


def get_params_dict():
    params_raw = cgi.FieldStorage(keep_blank_values=True)
    params_dict = {}
    for key in params_raw.keys():
        value = params_raw[key].value
        # Sanitize input by ignoring everything that doesn't match the allowed characters
        if allowed_chars.match(key) and allowed_chars.match(value):
            params_dict[key] = value

    # Fill default values for query parameters
    for key, default_value in default.items():
        params_dict[key] = params_dict.get(key, default_value)

    return params_dict


def run_command(command):
    try:
        cmd = subprocess.run(command, shell=True, timeout=1,
                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if cmd.returncode != 0:
            raise Exception('command returned non-zero exit code: ' + str(cmd.returncode))
        if cmd.stderr:
            stderr = cmd.stderr.decode('utf-8', errors='replace')
            raise Exception('command returned output to stderr: ' + stderr)
        else:
            command_output = cmd.stdout.decode('utf-8', errors='replace')
    except subprocess.TimeoutExpired:
        raise Exception('command timeout')

    return command_output


def xymondboard_cmd():
    cmd = '"xymondboard color={c} host={h} test={t} fields={f} page={p}"'.format(
        c=params['color'],
        h=params['host'],
        t=params['test'],
        f=params['fields'],
        p=params['page'],
    )

    return ['/usr/lib/xymon/server/bin/xymon 0 ' + cmd]


def merge_critical_scores():
    critical_score = defaultdict(dict)
    with open('critical.cfg', 'r') as f:
        for line in f:
            (host, test, _, _, _, score) = line.split('|')[:6]
            critical_score[host][test] = score

    for i in range(len(xymon_data)):
        host = xymon_data[i]['hostname']
        test = xymon_data[i]['testname']
        if host in critical_score and test in critical_score[host]:
            xymon_data[i]['critscore'] = critical_score[host][test]

    return True


params = get_params_dict()
xymon_lines = run_command(xymondboard_cmd()).splitlines()
xymon_data = [row for row in csv.DictReader(xymon_lines, delimiter='|',
                                            fieldnames=params['fields'].split(','))
              if row['hostname'] != 'summary']
merge_critical_scores()

print("Content-Type: application/json\nAccess-Control-Allow-Origin: *\n")
print(json.dumps(xymon_data, indent=4))
